/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Watchbot API
 * API documentation for Watchbot application
 * OpenAPI spec version: 1.0
 */

import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';
import type { BodyType, ErrorType } from '../../../lib/fetch-instance';

import { fetchInstance } from '../../../lib/fetch-instance';
import type { LoginDto, LoginParamsDto } from '../../../types/models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Login
 */
export const authControllerLogin = (
  loginParamsDto: BodyType<LoginParamsDto>,
  options?: SecondParameter<typeof fetchInstance>,
  signal?: AbortSignal
) => {
  return fetchInstance<LoginDto>(
    {
      url: `/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginParamsDto,
      signal,
    },
    options
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<LoginParamsDto> },
    TContext
  >;
  request?: SecondParameter<typeof fetchInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginParamsDto> },
  TContext
> => {
  const mutationKey = ['authControllerLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: BodyType<LoginParamsDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = BodyType<LoginParamsDto>;
export type AuthControllerLoginMutationError = ErrorType<unknown>;

/**
 * @summary Login
 */
export const useAuthControllerLogin = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: BodyType<LoginParamsDto> },
      TContext
    >;
    request?: SecondParameter<typeof fetchInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginParamsDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
